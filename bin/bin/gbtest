#!/bin/bash
#
# From Destroy All Software screencast #10, at:
# http://destroyallsoftware.com/screencasts/catalog/fast-tests-with-and-without-rails
#
# Released under the MIT license: http://opensource.org/licenses/MIT
#
# tweaked with love by mh

set -e
need_rails=1
if [ $# -gt 0 ]; then # we have args
    filename=$1
    # Remove trailing line numbers from filename, e.g. spec/my_spec.rb:33
    grep_filename=`echo $1 | sed 's/:.*$//g'`
	# when called on tested class, find spec
	set +e; echo "$grep_filename" | grep '^app' > /dev/null
	if [ $? -eq 0 ]; then # no match? we have a stand-alone spec or class in lib
		grep_filename=`echo "$grep_filename" | sed 's/^app/spec/' | sed 's/.rb$/_spec.rb/'`
		filename="$grep_filename`echo "$filename" | sed 's/[^:]*//'`" 
	fi
	set +e; echo "$grep_filename" | grep '^lib' > /dev/null
	if [ $? -eq 0 ]; then # no match? we really have a stand-alone spec
		grep_filename=`echo "$grep_filename" | sed 's/^lib/spec\/lib/' | sed 's/.rb$/_spec.rb/'`
		filename="$grep_filename`echo "$filename" | sed 's/[^:]*//'`" 
	fi
    set +e; grep -r '\bspec_helper\b' $grep_filename > /dev/null
    if [ $? -eq 1 ]; then # no match; we have a stand-alone spec
		echo "Yippie doesn't need rails"
		need_rails=''
    fi
	set -e
else # we have no args
    filename='spec'
fi

command='rspec'

if [ $need_rails ]; then
	echo "Arrrgh needs rails"
	which spring 2>&1 > /dev/null
	if [ $? -eq 0 ]; then
		echo "Luckily there's spring"
		command="spring $command"
	else
		command="$command"
	fi
fi
echo "Calling $command $filename"
RAILS_ENV=test time -f"\n\nTotal time: %e\n\n" $command $filename
